{"version":3,"sources":["components/GameOver.js","components/CardElement.js","components/GameBoard.js","game/game.js","MemoryGame.js","index.js"],"names":["GameOver","props","show","id","onClick","handleRestart","CardElement","handleFlip","card","className","flipped","src","icon","alt","GameBoard","cards","map","index","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","console","log","checkMatch","clearCards","unflipCards","checkGameOver","length","createCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","flipCard","cardId","gameOverCallback","noMatchCallback","setTimeout","MemoryGame","useState","gameOver","setGameOver","setCards","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c805ea15.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function GameOver(props) {\n  \n  return (\n    props.show? \n    <div id=\"gameOver\">\n      <div>Parabéns, você completou o jogo!</div>\n      <button id=\"restart\" onClick={props.handleRestart}>\n        Jogue novamente\n      </button>\n    </div>\n    :\n    <div></div>\n  );\n}\n","import React from 'react';\n\nexport default function CardElement(props){\n  return(\n    <div onClick={() => {props.handleFlip(props.card)}} id={props.card.id} className={`card ${props.card.flipped? \"flip\": \"\"}`}>\n      <div className=\"card_front\">\n        <img className=\"icon\" \n        src={`./assets/images/${props.card.icon}.png`} \n        alt={props.card.icon}></img>\n      </div>\n      <div className=\"card_back\">\n        {\"</>\"}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport CardElement from './CardElement';\n\nexport default function GameBoard(props){\n  return(\n    <div id=\"gameBoard\">\n      {props.cards.map((card, index) => <CardElement handleFlip={props.handleFlip} key={index} card={card}/>)}\n    </div>\n  )\n}","let game = {\n  lockMode: false,\n  firstCard: null,\n  secondCard: null,\n\n  techs: [\n    \"bootstrap\",\n    \"css\",\n    \"electron\",\n    \"firebase\",\n    \"html\",\n    \"javascript\",\n    \"jquery\",\n    \"mongo\",\n    \"node\",\n    \"react\",\n  ],\n\n  cards: null,\n\n  setCard: function (id) {\n    let card = this.cards.filter((card) => card.id === id)[0];\n    console.log(card);\n    if (card.flipped || this.lockMode) {\n      return false;\n    }\n\n    if (!this.firstCard) {\n      this.firstCard = card;\n      this.firstCard.flipped = true;\n      return true;\n    } else {\n      this.secondCard = card;\n      this.secondCard.flipped = true;\n      this.lockMode = true;\n      return true;\n    }\n  },\n\n  checkMatch: function () {\n    if (!this.firstCard || !this.secondCard) {\n      return false;\n    }\n    return this.firstCard.icon === this.secondCard.icon;\n  },\n\n  clearCards: function () {\n    this.firstCard = null;\n    this.secondCard = null;\n    this.lockMode = false;\n  },\n  unflipCards() {\n    this.firstCard.flipped = false;\n    this.secondCard.flipped = false;\n    this.clearCards();\n  },\n\n  checkGameOver() {\n    return this.cards.filter((card) => !card.flipped).length === 0;\n  },\n\n  createCardsFromTechs: function () {\n    this.cards = [];\n\n    this.techs.forEach((tech) => {\n      this.cards.push(this.createPairFromTech(tech));\n    });\n    this.cards = this.cards.flatMap((pair) => pair);\n    this.shuffleCards();\n    return this.cards;\n  },\n\n  createPairFromTech: function (tech) {\n    return [\n      {\n        id: this.createIdWithTech(tech),\n        icon: tech,\n        flipped: false,\n      },\n      {\n        id: this.createIdWithTech(tech),\n        icon: tech,\n        flipped: false,\n      },\n    ];\n  },\n\n  createIdWithTech: function (tech) {\n    return tech + parseInt(Math.random() * 1000);\n  },\n\n  shuffleCards: function (cards) {\n    let currentIndex = this.cards.length;\n    let randomIndex = 0;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [this.cards[randomIndex], this.cards[currentIndex]] = [\n        this.cards[currentIndex],\n        this.cards[randomIndex],\n      ];\n    }\n  },\n\n  flipCard: function (cardId, gameOverCallback, noMatchCallback) {\n    if (this.setCard(cardId)) {\n      if (this.secondCard) {\n        if (this.checkMatch()) {\n          this.clearCards();\n          if (this.checkGameOver()) {\n            //GameOver\n            gameOverCallback()\n          }\n        } else {\n          setTimeout(() => {\n            //No match\n\n            this.unflipCards();\n            noMatchCallback();\n          }, 1000);\n        }\n      }\n    }\n  },\n};\n\nexport default game;\n","import React, {useEffect, useState}from 'react';\nimport GameOver from './components/GameOver'\nimport GameBoard from './components/GameBoard'\nimport game from './game/game';\n\nexport default function MemoryGame(){\n  const [gameOver, setGameOver] = useState(false);\n  const [cards, setCards] = useState([]);\n\n  useEffect(() =>{\n    setCards(game.createCardsFromTechs());\n  },[])\n\n  function restart(){\n   game.clearCards();\n   setCards(game.createCardsFromTechs());\n   setGameOver(false); \n  }\n\n  function handleFlip(card){\n  //   if (game.setCard(card.id)) {\n\n      \n  //     if (game.secondCard) {\n  //         if (game.checkMatch()) {\n  //             game.clearCards();\n  //             if (game.checkGameOver()) {\n  //               //GameOver\n  //               setGameOver(true);\n  //             }\n  //         } else {\n  //             setTimeout(() => {\n  //                 //No match\n  //                 game.unflipCards();\n  //                 setCards([...game.cards])\n  //             }, 1000);\n\n  //         };\n  //     }\n  // }\n  game.flipCard(card.id, ()=>{\n    //GameOverCallback\n    setGameOver(true);\n  },\n  ()=>{\n    //No matchCallback\n    setCards([...game.cards]);\n  })\n  setCards([...game.cards])\n  }\n  return(\n    <div>\n      <GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\n      <GameOver show={gameOver} handleRestart={restart}/>\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame  from './MemoryGame';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}